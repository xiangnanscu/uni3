local view = require("xodel.view")
local utils = require("xodel.utils")
local Model = require("xodel.model")
local models = require("models.models")
local {*component_name*} = require("models.models").{*component_name*}
{*fk_import_statement*}
local tonumber = tonumber

local {*component_name*}Json = Model:create_model({
  extends = {*component_name*},
  fields = {

  }
}):to_camel_json()
local {*table_name*}_json = view:class {
  user_require = true,
}
function {*table_name*}_json:get(request)
  local query = request.get_uri_args()
  local key = query.key
  if key then
    return utils.chaining_operator({*component_name*}Json, key)
  else
    return {*component_name*}Json
  end
end
-- {*field_names_token*}
local {*table_name*}_names = utils.list({ "{*model_pk*}", "ctime" }, {*component_name*}.names)

local {*table_name*}_list = view:class {
  user_require = true,
}
function {*table_name*}_list:post(request)
  local query = request.get_uri_args()
  local pagesize = tonumber(query.pagesize or 0)
  local page = tonumber(query.page or 1)
  local list_condition = utils.get_list_search_condition(request.get_post_data())
  local {*table_name*}_records = {*component_name*}:where(list_condition):select({*table_name*}_names)
      :order('id DESC')
  if pagesize ~= 0 then
    {*table_name*}_records:limit(pagesize):offset((page - 1) * pagesize)
  end
  local total = {*component_name*}:count(list_condition)
  return { records = {*table_name*}_records:exec(), total = total }
end

local {*table_name*}_create = view:class {
  user_require = false,
}
function {*table_name*}_create:post(request)
  local data = request:get_post_data()
  return {*component_name*}:save_create(data)
end

local {*table_name*}_detail = view:class {
  user_require = true,
}
function {*table_name*}_detail:get(request)
  local id = request.params.id
  local ins = {*component_name*}:select({*table_name*}_names):get { id = id }
  return ins
end

local {*table_name*}_update_names = { {*field_names_token*} }
local {*table_name*}_update = view:class {
  user_require = true,
}
function {*table_name*}_update:post(request)
  local id = request.params.id
  local data = request:get_post_data()
  return {*component_name*}:update(data):where { id = id }:execr()
end

local {*table_name*}_delete = view:class {
  user_require = true,
}
function {*table_name*}_delete:post(request)
  return {*component_name*}:delete { id = request.params.id }:execr()
end

local {*table_name*}_download = view:class {
  user_require = true,
}
function {*table_name*}_download:post(request)
  return {*component_name*}:order('id DESC'):where {}:execr()
end

local {*table_name*}_merge = view:class {
  user_require = true,
}
function {*table_name*}_merge:post(request)
  local query = request.get_uri_args()
  local rows = request.get_post_data()
  return {*component_name*}:merge(rows, query.key, query.columns)
end

local {*table_name*}_choices = view:class {
  user_require = true,
}
function {*table_name*}_choices:post(request)
  local query = request.get_uri_args()
  local s_value = request.format("%s as value", query)
  local s_label = request.format("%s as label", query.label or query)
  return {*component_name*}:select(s_value, s_label):execr()
end

local {*table_name*}_filter = view:class {
  user_require = true,
}
function {*table_name*}_filter:post(request)
  local data = request.get_post_data()
  return {*component_name*}:order('id DESC'):where(data.where):select(data.select):execr()
end

local {*table_name*}_get = view:class {
  user_require = true,
}
function {*table_name*}_get:post(request)
  local data = request.get_post_data()
  return {*component_name*}:select({*table_name*}_names):get(data)
end

return {
  [""] = {*table_name*}_list,
  ["json"] = {*table_name*}_json,
  ["create"] = {*table_name*}_create,
  ["detail/#id"] = {*table_name*}_detail,
  ["update/#id"] = {*table_name*}_update,
  ["delete/#id"] = {*table_name*}_delete,
  ["download"] = {*table_name*}_download,
  ["merge"] = {*table_name*}_merge,
  ["choices"] = {*table_name*}_choices,
  ["filter"] = {*table_name*}_filter,
  ["get"] = {*table_name*}_get,
}
